<?php

use Drupal\Core\Url;

/**
 * This is modified heavily from the version in Webspark 2.0.
 *
 * We embed event blocks into our content via entity embed which
 * renders the block_content but not as a block. So we have to change
 * the preprocess functions to work with entity embed containers instead
 * of blocks.
 */


/**
 * Implements hook_preprocess_HOOK().
 *
 * {@inheritdoc}
 *
 * Combined the old library events module with the new webspark
 * module in this function.
 * Beginning bits are from the previous version of
 * the events module and the rest is from the new version.
 *
 */
function asu_events_preprocess_entity_embed_container(&$variables) {
  $element = $variables['element'];
  $block = $element['#entity'];
  $block_type = $block->bundle();
  if ($block_type == "events") {
    $variables['base_plugin_id'] = 'inline_block';
    $variables['derivative_plugin_id'] = 'events';
    $variables['content']['#block_content'] = $block;

    /* Moved the following from block_alter function to this one */
    $rand_id = random_int(0, PHP_INT_MAX);
    $events_block = (object)[
        'header' => new \stdClass(),
        'ctaButton' => new \stdClass(),
        'dataSource' => new \stdClass(),
    ];

    $variables['events_id'] = 'events-wrapper-' . $rand_id;
    $block = $variables['content']['#block_content'];

    if ($block->field_events_heading->value) {
      $events_block->header->text = $block->field_events_heading->value;
    }
    if ($block->field_events_header_text_color->value) {
      $events_block->header->color = $block->field_events_header_text_color->value;
    }
    if ($block->field_events_cta && $block->field_events_cta->title && $block->field_events_cta->uri) {
      $events_block->ctaButton->text = $block->field_events_cta->title;
      $link = Url::fromUri($block->field_events_cta->uri);
      $events_block->ctaButton->url = $link->toString();
    }
    if ($block->field_events_cta_color->value) {
      $events_block->ctaButton->color = $block->field_events_cta_color->value;
    }
    if ($block->field_events_items_to_display->value) {
      $events_block->display = $block->field_events_items_to_display->value;
    }
    $events_block->dataSource->url = '/asu-events-feed/';
    if ($block->field_feed_taxonomy_term->value) {
      // Allow only alphanumeric characters and underscore.
      $events_block->dataSource->url .= preg_replace('/[^A-Za-z0-9\_]/', '', $block->field_feed_taxonomy_term->value);
    }
    if ($block->field_events_feed_filter->value) {
      $events_block->dataSource->filters = $block->field_events_feed_filter->value;
    }

    $settings = [];
    $settings['components']['asu_events'][$rand_id] = $events_block;

    $variables['content']['#attached']['drupalSettings']['asu'] = $settings;
    $variables['content']['#attached']['library'][] = 'asu_events/events-component';

  }
}

/**
 * Implements hook_theme().
 *
 * {@inheritdoc}
 *
 * Tell the module to use the correct theme file - we need
 * entity embeds rather than inline blocks.
 */
function asu_events_theme($existing, $type, $theme, $path) {
  $templates = $path . '/templates';
  return [
      'entity_embed_container__embed_button__events' => [
          'base hook' => 'entity_embed_container',
          'render element' => 'element'
      ]
  ];
}

/**
 * Implements hook_theme_suggestions_alter()
 *
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 * @return void
 *
 * Add a theme suggestion for entity embed button plus the block type.
 *
 */
function asu_events_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if (!empty($variables['element']['#entity'])) {
    $block_type = $variables['element']['#entity']->bundle();
    $suggestions[] = 'entity_embed_container__embed_button' . '__' . $block_type;
  }
}